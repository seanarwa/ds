name: Go

on:
  push:
    branches:
      - master
    tags:
        - v*
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      DS_BUILD_DIR: ${{ github.workspace }}/build
    strategy:
      matrix:
        platform:
          - os: darwin
            arch: 386
          - os: darwin
            arch: amd64
          - os: windows
            arch: 386
          - os: windows
            arch: amd64
          - os: linux
            arch: 386
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
    steps:
      - name: Setup - Install Go 1.14.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x
        id: go
      - name: Setup - Check out code
        uses: actions/checkout@v2
      - name: Setup - Set DS_VERSION
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          
          # Set DS_VERSION
          echo "::set-env name=DS_VERSION::$VERSION"
      - name: Setup - Create build directory
        run: mkdir -p $DS_BUILD_DIR
      - name: Setup - Move conf/ to build directory
        run: cp -rf conf $DS_BUILD_DIR/conf
      - name: Setup - Substitute conf/app.yaml version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'conf/app.yaml'
        env:
          version: ${{ env.DS_VERSION }}
      - name: Build - Get Go dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
      - name: Build - Go Build
        run: go build -o $DS_BUILD_DIR -v .
        env:
          GOOS: ${{ matrix.platform.os }}
          GOARCH: ${{ matrix.platform.arch }}
      - name: Package - Set DS_PACKAGE_NAME
        run: echo "::set-env name=DS_PACKAGE_NAME::ds-${{ env.DS_VERSION }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}"
      - name: Package - Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.DS_PACKAGE_NAME }}
          path: ${{ env.DS_BUILD_DIR }}/*
      - name: Package - Zip release packages
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cd ${{ env.DS_BUILD_DIR }}
          zip -r ${{ env.DS_PACKAGE_NAME }}.zip ./*
      - name: Package - Get release
        if: startsWith(github.ref, 'refs/tags/v')
        id: get_release
        uses: bruceadams/get-release@v1.2.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Package - Upload packages to release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_path: ${{ env.DS_BUILD_DIR }}/${{ env.DS_PACKAGE_NAME }}.zip
          asset_name: ${{ env.DS_PACKAGE_NAME }}.zip
          asset_content_type: application/zip
